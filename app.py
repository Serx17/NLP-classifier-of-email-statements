# app.py
# –≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Streamlit.

import streamlit as st
import joblib
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
import pymorphy3

# --- –í–ê–ñ–ù–û: –§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê ---
# –ú—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–ß–ù–û —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏!
# –ò–Ω–∞—á–µ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–π–º–µ—Ç, —á—Ç–æ –µ–π –ø–æ–¥–∞—é—Ç –Ω–∞ –≤—Ö–æ–¥.

# –°–∫–∞—á–∏–≤–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (—Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
nltk.download('stopwords')
russian_stopwords = stopwords.words('russian')
morph = pymorphy3.MorphAnalyzer()

def preprocess_text(text):
    """
    –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ train_model.py!
    –û—á–∏—â–∞–µ—Ç –∏ –ª–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç.
    """
    text = text.lower()
    text = re.sub(r'[^–∞-—è—ë\s]', ' ', text, flags=re.IGNORECASE)
    words = text.split()
    clean_words = []
    for word in words:
        if word not in russian_stopwords and len(word) > 2:
            lemma = morph.parse(word)[0].normal_form
            clean_words.append(lemma)
    return " ".join(clean_words)

# --- –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò ---
# –í–ê–ñ–ù–û: –§–∞–π–ª 'pipeline.pkl' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç!
try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à "–ø–∞–π–ø–ª–∞–π–Ω", –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä, –∏ –º–æ–¥–µ–ª—å
    pipeline = joblib.load('pipeline.pkl')
    # "–î–æ—Å—Ç–∞–µ–º" –∏–∑ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –≤–µ–∫—Ç–æ—Ä–∑–∞—Ç–æ—Ä –∏ –º–æ–¥–µ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    vectorizer = pipeline['vectorizer']
    model = pipeline['model']
except FileNotFoundError:
    st.error("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –º–æ–¥–µ–ª–∏ 'pipeline.pkl' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤ train_model.py")
    st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç

# --- –°–û–ó–î–ê–ù–ò–ï –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê –° –ü–û–ú–û–©–¨–Æ STREAMLIT ---

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —é—Ä–∏—Å—Ç–∞ –ø–æ –≤–∑—ã—Å–∫–∞–Ω–∏—é")
st.markdown("""
–≠—Ç–æ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –æ—Ç –¥–æ–ª–∂–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π –æ—Ç–¥–µ–ª –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É.
**–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª.**
""")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–±–æ–ª—å—à–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤—ã—Å–æ—Ç–æ–π 150 –ø–∏–∫—Å–µ–ª–µ–π)
user_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ—à—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ —Ä–∞–±–æ—Ç—ã...'", height=150)

# –ö–Ω–æ–ø–∫–∞, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
if st.button("üöÄ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"): # type="primary" –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ü–≤–µ—Ç–Ω–æ–π –∏ –∑–∞–º–µ—Ç–Ω–æ–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤–µ–ª
    if user_input:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä (–∫—Ä—É—Ç—è—â–∏–π—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏) –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        with st.spinner('AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç...'):
            
            # --- –ö–õ–Æ–ß–ï–í–û–ô –≠–¢–ê–ü: –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï ---
            # 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—á–∏—Å—Ç–∏–º –∏ –ª–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ–º)
            cleaned_text = preprocess_text(user_input)
            
            # 2. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–∞ —Å –ø–æ–º–æ—â—å—é –ù–ê–®–ï–ì–û –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
            text_vectorized = vectorizer.transform([cleaned_text])
            
            # 3. –ü—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —á–∏—Å–µ–ª
            prediction = model.predict(text_vectorized)
            
            # 4. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏)
            probabilities = model.predict_proba(text_vectorized)
            max_probability = probabilities.max() # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

        # --- –ö–†–ê–°–ò–í–û –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´ ---

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        st.success(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {prediction[0]}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        st.info(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {max_probability:.2%}")

        # –ü–æ–∫–∞–∂–µ–º —Ç–æ–ø-3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏–º
        # st.write("**–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**")
        # for i, prob in enumerate(probabilities[0]):
        #     if prob > 0.1: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é > 10%
        #         st.write(f"- {model.classes_[i]}: {prob:.2%}")

        # --- –ë–õ–û–ö –î–õ–Ø –ë–ò–ó–ù–ï–°–ê (–≤–∞—à –æ–ø—ã—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω—â–∏–∫–∞) ---
        st.divider() # –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        col1, col2, col3 = st.columns(3)
        # –í –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é –≤—Ä–µ–º–µ–Ω–∏
        col1.metric(
            label="–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 1 –æ–±—Ä–∞—â–µ–Ω–∏–∏",
            value="~8 –º–∏–Ω",
            delta="-80%", # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            delta_color="inverse"
        )
        # –í–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ - —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        col2.metric(
            label="–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (Accuracy)",
            value=f"~{pipeline['model'].score.__self__}%", # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–±—É—á–µ–Ω–∏—è
            delta="+9%"
        )
        # –í —Ç—Ä–µ—Ç—å–µ–π - –ø—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        col3.metric(
            label="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
            value="1 243",
            delta="+57 —Å —É—Ç—Ä–∞"
        )

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª, –ø–æ–∫–∞–∂–µ–º –æ—à–∏–±–∫—É
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ù–ò–ñ–ù–ò–ô –ö–û–õ–û–ù–¢–ò–¢–£–õ ---
st.divider()
st.caption("""
*–ü—Ä–æ—Ç–æ—Ç–∏–ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π AI –≤ —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏. 
–î–ª—è –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç. –¢–æ—á–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.*
""") 
